#lang racket
(require rackunit)

(define (cube x) (* x x x))
(define (p x) (print '*) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
    angle
    (p (sine (/ angle 3.0)))))

; How many times is the procedure p applied when (sine 12.15) is evaluated?
; (sine 12.15) ; ==> 5 times

; What is the order of growth in space and number of steps (as a function of a)
; used by the process generated by the sine procedure when (sine a) is evaluated?

(sine 0.1)                          ; no recursion because is within limit
(sine 0.100000000000001)            ; 1 call        (previous + 1)
(sine (* 0.100000000000001 3))      ; 2 calls       (previous + 1)
(sine (* 0.100000000000001 3 3))    ; 3 calls       (previous + 1)
(sine (* 0.100000000000001 3 3 3))  ; 4 calls       (previous + 1)

; everytime we tripple the angle, we add another call
; so for every multiplication of input, we get an addition to the steps
; ==> logarithmic !!!
;
; The space refers to the size of the stack that we create as we chug along
; because of the recursion. In each recursion we need to keep track of where
; we come from (who called). In this case p & sine are called together
; so if logarithmic worked for steps, logarithmic it is for space !!

